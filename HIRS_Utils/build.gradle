plugins {
    id 'java'
    id 'checkstyle'
}
// Get version from main project gradle
def packVersion = properties.get("packageVersion")
def jarVersion = properties.get("jarVersion")
//println "packageVersion is ${projVersion}"


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    flatDir { dirs "lib" }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    jaxb
}

dependencies {
    implementation libs.bouncycastle
    implementation libs.commons.codec
    implementation libs.commons.lang3
    implementation libs.commons.io
    implementation libs.glassfish.jaxb.runtime
    implementation libs.guava
    implementation libs.jackson.core
    implementation libs.jackson.databind
    implementation libs.jakarta.persistence.api
    implementation libs.jakarta.xml
    implementation libs.log4j.core
    implementation libs.log4j.api
    implementation libs.minimal.json
    implementation libs.pci
    implementation libs.slf4j.simple

    compileOnly libs.lombok
    annotationProcessor libs.lombok

    testImplementation libs.junit.jupiter
    testImplementation libs.junit.platform.launcher
    testImplementation libs.hamcrest
    testImplementation libs.mockito.core
    testImplementation project(path: ':HIRS_AttestationCA')
    
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
}

checkstyle {
    toolVersion = '10.12.7'
    configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
}
// https://github.com/checkstyle/checkstyle/issues/14211#issuecomment-1884129948
configurations.checkstyle {
    resolutionStrategy.capabilitiesResolution.withCapability("com.google.collections:google-collections") {
        select("com.google.guava:guava:0")
    }
}
checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}
tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
    }
}

test {
    useJUnitPlatform()
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
        )
    }
    //jar name format: [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
    archiveVersion = jarVersion
}

//task generateXjcLibrary(type:Exec) {
//    workingDir 'config'
//
//    commandLine './genXjcLibrary.sh'
//}
//compileJava.dependsOn generateXjcLibrary