// Get version from main project gradle
def packVersion = properties.get("packageVersion")
def jarVersion = properties.get("jarVersion")
//println "packageVersion is ${projVersion}"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    jaxb
}

dependencies {
    implementation libs.bouncycastle
    implementation libs.commons.codec
    implementation libs.commons.lang3
    implementation libs.commons.io
    implementation libs.glassfish.jaxb.runtime
    implementation libs.guava
    implementation libs.jackson.core
    implementation libs.jackson.databind
    implementation libs.jakarta.persistence.api
    implementation libs.jakarta.xml
    implementation libs.spring.boot.starter.log4j2
    implementation libs.minimal.json

    // pull the pci dependency and ...
    implementation(libs.pci) {
        // explicitly exclude the default apache http client transitive dependency
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    // and explicitly include the patched version of the apache http client dependency
    implementation libs.apacheHttpClient

    implementation libs.slf4j.simple

    compileOnly libs.lombok
    annotationProcessor libs.lombok

    testImplementation libs.spring.boot.starter.test
    testImplementation project(path: ':HIRS_AttestationCA')

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
}

test {
    useJUnitPlatform()
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
        )
    }
    //jar name format: [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
    archiveVersion = jarVersion
}

//task generateXjcLibrary(type:Exec) {
//    workingDir 'config'
//
//    commandLine './genXjcLibrary.sh'
//}
//compileJava.dependsOn generateXjcLibrary